version: '3.2'
services:
  galaxy-postgres:
    # If you are using the official postgres image, it needs to be populated by calling
    # docker-compose run galaxy install_db.sh
    # on first run
    image: bgruening/galaxy-stable:${TAG_GALAXY_WEB:-latest}
    container_name: galaxy-postgres
    hostname: galaxy-postgres
    env_file: .env
    volumes:
      - type: bind
        source: ${DIR_GALAXY_POSTGRES:-/you/need/a/valid/path/if/you/do/not/specify/DIR_GALAXY_POSTGRES/in/the/compose/environment/file}
        target: /etc/supervisor
      - type: volume
        source: galaxy-store-vol
        target: /export
    expose:
      - "5432"
    entrypoint: /etc/supervisor/config/startup.sh

  # This container provides the galaxy uwsgi webhandlers, job handlers, nginx
  galaxy-stable:
    image: bgruening/galaxy-stable:${TAG_GALAXY_WEB:-latest}
    container_name: galaxy-stable
    depends_on:
      - galaxy-postgres
    env_file: .env
    environment:
      # In case the galaxy-init container is not used, you need to include "sleeplock" to NONUSE
      - NONUSE=postgres,sleeplock
      - GALAXY_CONFIG_DATABASE_CONNECTION=postgresql://galaxy:galaxy@galaxy-postgres:5432/galaxy
    hostname: galaxy-stable
    privileged: True
    ports:
      - "${GALAXY_PORT:-8080}:80" # nginx
    volumes:
        # This is the directory where all your files from Galaxy will be stored on your host system
      - type: volume
        source: galaxy-store-vol
        target: /export

  # PostgreSQL admin suite
  pgadmin4:
    image: thajeztah/pgadmin4
    container_name: pgadmin4
    env_file: .env
    ports:
        - "5050:5050"
    volumes:
        # This is the volume to persist pgadmin4 data
      - type: volume
        source: pgadmin4-vol
        target: /pgadmin
    restart: unless-stopped
    depends_on:
      - galaxy-postgres
    labels:
        kompose.service.type: nodeport

volumes:
  # init galaxy-store-data container using the following commands
  #   # create the volume
  #   docker volume create galaxy-store-vol
  #   # optional, inspect resulting volume
  #   docker volume inspect galaxy-store-vol
  #   # create the data-storage container
  #   docker create --mount source=galaxy-store-vol,target=/export --name galaxy-store-data bgruening/galaxy-stable /bin/true
  #   # initialize the data-storage container
  #   docker run --rm -ti -p 8080:80 --volumes-from galaxy-store-data --name galaxy_bootstrap bgruening/galaxy-stable
  #   # Then use ^C to quit after export volume is initialized
  galaxy-store-vol:
    external: true
  # init pgadmin4-data container using the following commands
  #   # create the volume
  #   docker volume create pgadmin4-vol
  pgadmin4-vol:
    external: true
